risk.table.col    = "strata",
palette           = "npg",
data              = chr4p,
size              = 1,
xlim              = c(0,120),
break.time.by     = 20,
legend.title      = "",
surv.median.line  = "hv",
xlab              = "Time (Months)",
ylab              = "Survival probability (%)",
risk.table.y.text = FALSE))
p$plot <- p$plot + scale_y_continuous(breaks = seq(0, 1, 0.25), labels = seq(0,100,25))
p
chr4q <- data.frame(cna = as.numeric(chr4["4q",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4q$chr4q <- ifelse(chr4q$cna < 0,"loss","non-loss")
chr4q <- chr4q[which(chr4q$CMOIC %in% c("CS1","CS4")),]
fitd <- survdiff(Surv(futime, fustat) ~ chr4q,
data      = chr4q,
na.action = na.exclude)
p.val <- 1 - pchisq(fitd$chisq, length(fitd$n) - 1)
fit <- survfit(Surv(futime, fustat)~ chr4q,
data      = chr4q,
type      = "kaplan-meier",
error     = "greenwood",
conf.type = "plain",
na.action = na.exclude)
names(fit$strata) <- gsub("chr4q=", "", names(fit$strata))
p <- suppressWarnings(ggsurvplot(fit               = fit,
conf.int          = FALSE,
risk.table        = TRUE,
risk.table.col    = "strata",
palette           = "npg",
data              = chr4q,
size              = 1,
xlim              = c(0,120),
break.time.by     = 20,
legend.title      = "",
surv.median.line  = "hv",
xlab              = "Time (Months)",
ylab              = "Survival probability (%)",
risk.table.y.text = FALSE))
p$plot <- p$plot + scale_y_continuous(breaks = seq(0, 1, 0.25), labels = seq(0,100,25))
p
chr4p <- data.frame(cna = as.numeric(chr4["4p",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4p$chr4p <- ifelse(chr4p$cna < 0,"loss","non-loss")
chr4p$chr4p <- factor(chr4p$chr4p,levels = c("non-loss","loss"))
cox <- coxph(Surv(futime,fustat) ~ chr4p, data = chr4p)
cox
chr4p <- data.frame(cna = as.numeric(chr4["4p",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4p$chr4p <- ifelse(chr4p$cna < 0,"loss","non-loss")
chr4p$chr4p <- factor(chr4p$chr4p,levels = c("non-loss","loss"))
chr4p <- chr4p[which(chr4p$CMOIC %in% c("CS1","CS4")),]
cox <- coxph(Surv(futime,fustat) ~ chr4p, data = chr4p)
cox
chr4 <- read.table(file.path(res.path,"339742/TCGA_BLCA_0.2_0.05.broad_values_by_arm.txt"),sep = "\t",row.names = 1,check.names = F,stringsAsFactors = F,header = T)
chr4p <- data.frame(cna = as.numeric(chr4["4p",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4p$chr4p <- ifelse(chr4p$cna < 0,"loss","non-loss")
chr4p$chr4p <- factor(chr4p$chr4p,levels = c("non-loss","loss"))
chr4p <- chr4p[which(chr4p$CMOIC %in% c("CS1","CS4")),]
cox <- coxph(Surv(futime,fustat) ~ chr4p, data = chr4p)
cox
summary(cox)
chr4q <- data.frame(cna = as.numeric(chr4["4q",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4q$chr4q <- ifelse(chr4q$cna < 0,"loss","non-loss")
chr4q <- chr4q[which(chr4q$CMOIC %in% c("CS1","CS4")),]
chr4q <- data.frame(cna = as.numeric(chr4["4q",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4q$chr4q <- ifelse(chr4q$cna < 0,"loss","non-loss")
chr4q <- chr4q[which(chr4q$CMOIC %in% c("CS1","CS4")),]
cox <- coxph(Surv(futime,fustat) ~ chr4p, data = chr4p)
cox
cox <- coxph(Surv(futime,fustat) ~ chr4q, data = chr4q)
cox
chr4q$chr4p <- factor(chr4q$chr4q,levels = c("non-loss","loss"))
cox <- coxph(Surv(futime,fustat) ~ chr4q, data = chr4q)
cox
chr4q <- data.frame(cna = as.numeric(chr4["4q",rownames(annCol.tcga)]),
CMOIC = annCol.tcga$CMOIC,
fustat = annCol.tcga$OS,
futime = as.numeric(surv.info[rownames(annCol.tcga),"futime"])/30)
chr4q$chr4q <- ifelse(chr4q$cna < 0,"loss","non-loss")
chr4q <- chr4q[which(chr4q$CMOIC %in% c("CS1","CS4")),]
chr4q$chr4q <- factor(chr4q$chr4q,levels = c("non-loss","loss"))
cox <- coxph(Surv(futime,fustat) ~ chr4q, data = chr4q)
cox
load("G:/BLCA_MOVICS/movics_pipeline/movics_pipeline.RData")
table(annCol.tcga$OS)
table(surv$OS)
175/396
median_surv <- surv_fit(Surv(OS.time,OS)~1,data = surv[rownames(annCol.tcga),])
# calculate median survival
library(survminer)
median_surv <- surv_fit(Surv(OS.time,OS)~1,data = surv[rownames(annCol.tcga),])
library(survival)
# calculate median survival
library(survminer)
median_surv <- surv_fit(Surv(OS.time,OS)~1,data = surv[rownames(annCol.tcga),])
median_surv
1036/30
823/30
1718/30
175/396
mean(annCol.tcga$Age)
annCol.tcga$Age
surv$Age
surv$age_at_diagnosis
mean(surv$age_at_diagnosis)
mean(annCol.tcga$Gender)
table(annCol.tcga$Gender)
library(devtools)
library(roxygen2)
library(usethis)
workdir <- "D:/Project/BLCA/Rpackage"; setwd(workdir)
usethis::create_package("BCaller")
load("D:/Project/BLCA/BLCA.NEW.RData")
IRGP1
# genes in IRGPI1
IRGP1 <- c("AMMECR1L",
"BIRC5",
"G6PD",
"BTK",
"C5",
"EGR2",
"LY9",
"CXCL1",
"HLA-DPB1",
"CLEC4A",
"EGR1",
"ITGA5",
"CCL11",
"ITGA1",
"AXL",
"NUP107",
"SYT17",
"SAA1",
"AMMECR1L",
"CARD11",
"CD96",
"CD3G",
"CCL17",
"AMMECR1L",
"JAK2",
"TLR4",
"INPP5D",
"MEFV",
"ICAM2")
# genes in IRGPI2
IRGP2 <- c("MST1R",
"ST6GAL1",
"SYT17",
"CD247",
"CD96",
"IL15",
"MAGEC2",
"IL1A",
"RRAD",
"EOMES",
"NFKB1",
"MR1",
"MARCO",
"TLR4",
"CEACAM1",
"THY1",
"THY1",
"TGFB1",
"MAP2K1",
"IL1R1",
"CNOT4",
"DPP4",
"PBK",
"IL4R",
"PDGFC",
"VEGFC",
"PVR",
"SERPINB2",
"THY1")
range(tcga.blca.expr)
dim(tcga.blca.expr)
demo <- tcga.blca.expr[c(IRGP1,IRGP2),]
View(demo)
save(demo,file = "D:/Project/BLCA/Rpackage/BCaller/inst/extdata/demo.RData")
#' @name calIRGPI
#' @title Calculate immune-related genes pair index (IRGPI) for bladder cancer
#' @description This function calculates an IRGPI risk score individually for bladder cancer only.
#' @param expr A numerical expression matrix or data frame with row for gene symbol name and column for sample ID. Note: In principle, the expression profile does not need any normalization, but since the amount of gene expression is affected by the gene length, the original count or the normalized count data may not be suitable for this analysis. It is recommended to provide FPKM or TPM value and log transformation is not necessary.
#' @param res.path A string value to indicate the output path for storing the Estimated IRGPI.txt file.
#'
#' @return A data frame stored sample name and estimated IRGPI.
#' @export
#' @references Prognosis stratification and personalized treatment in bladder cancer through a robust immune gene-pair based signature
#' @author Xiaofan Lu
calIRGPI <- function(expr     = NULL,
res.path = getwd()) {
# genes in IRGPI1
IRGP1 <- c("AMMECR1L",
"BIRC5",
"G6PD",
"BTK",
"C5",
"EGR2",
"LY9",
"CXCL1",
"HLA-DPB1",
"CLEC4A",
"EGR1",
"ITGA5",
"CCL11",
"ITGA1",
"AXL",
"NUP107",
"SYT17",
"SAA1",
"AMMECR1L",
"CARD11",
"CD96",
"CD3G",
"CCL17",
"AMMECR1L",
"JAK2",
"TLR4",
"INPP5D",
"MEFV",
"ICAM2")
# genes in IRGPI2
IRGP2 <- c("MST1R",
"ST6GAL1",
"SYT17",
"CD247",
"CD96",
"IL15",
"MAGEC2",
"IL1A",
"RRAD",
"EOMES",
"NFKB1",
"MR1",
"MARCO",
"TLR4",
"CEACAM1",
"THY1",
"THY1",
"TGFB1",
"MAP2K1",
"IL1R1",
"CNOT4",
"DPP4",
"PBK",
"IL4R",
"PDGFC",
"VEGFC",
"PVR",
"SERPINB2",
"THY1")
# coefficient for each IRGP
coeff <- c(-0.278125761,
-0.240534714,
-0.231481299,
-0.219619661,
-0.14952529,
-0.134399494,
-0.123209559,
-0.109416714,
-0.107499057,
-0.103013301,
-0.088255513,
-0.078881388,
-0.040480343,
-0.036568213,
-0.026672769,
0.007069121,
0.030336853,
0.066360407,
0.132744554,
0.136897427,
0.159178132,
0.18447765,
0.211337792,
0.233469355,
0.261049599,
0.327501543,
0.33704137,
0.397375749,
0.46981137)
# initial check
if(max(expr) >= 25){
message("--please make sure a properly normalized expression data has been provided (e.g., FPKM or TPM); count data is not suitable because it does not consider gene length.")
}
if(!all(is.element(unique(c(IRGP1,IRGP2)), rownames(expr)))) {
missgene <- setdiff(unique(c(IRGP1,IRGP2)), rownames(expr))
stop(paste0(length(missgene)," genes cannot be mapped in your data, please check for the following missing feature(s):\n",
paste(missgene, collapse = "\n")))
}
# extract expression
IRGP1.expr <- expr[IRGP1,]
IRGP2.expr <- expr[IRGP2,]
# calculate difference and convert to binary matrix
IRGP.diff <- IRGP1.expr - IRGP2.expr
IRGP.binary <- ifelse(IRGP.diff < 0, 1, 0)
# estimate IRGPI
IRGPI <- apply(t(IRGP.binary),1,function(x) {x %*% coeff})
# output
write.table(data.frame(SampleID = names(IRGPI),
IRGPI = as.numeric(IRGPI),
stringsAsFactors = F),
file = file.path(res.path,"Estimated IRGPI.txt"),
sep = "\t",
row.names = FALSE,
col.names = TRUE,
quote = FALSE)
}
tmp <- calIRGPI(expr = demo)
tmp
#' @name calIRGPI
#' @title Calculate immune-related genes pair index (IRGPI) for bladder cancer
#' @description This function calculates an IRGPI risk score individually for bladder cancer only.
#' @param expr A numerical expression matrix or data frame with row for gene symbol name and column for sample ID. Note: In principle, the expression profile does not need any normalization, but since the amount of gene expression is affected by the gene length, the original count or the normalized count data may not be suitable for this analysis. It is recommended to provide FPKM or TPM value and log transformation is not necessary.
#' @param res.path A string value to indicate the output path for storing the Estimated IRGPI.txt file.
#'
#' @return A data frame stored sample name and estimated IRGPI.
#' @export
#' @references Prognosis stratification and personalized treatment in bladder cancer through a robust immune gene-pair based signature
#' @author Xiaofan Lu
calIRGPI <- function(expr     = NULL,
res.path = getwd()) {
# genes in IRGPI1
IRGP1 <- c("AMMECR1L",
"BIRC5",
"G6PD",
"BTK",
"C5",
"EGR2",
"LY9",
"CXCL1",
"HLA-DPB1",
"CLEC4A",
"EGR1",
"ITGA5",
"CCL11",
"ITGA1",
"AXL",
"NUP107",
"SYT17",
"SAA1",
"AMMECR1L",
"CARD11",
"CD96",
"CD3G",
"CCL17",
"AMMECR1L",
"JAK2",
"TLR4",
"INPP5D",
"MEFV",
"ICAM2")
# genes in IRGPI2
IRGP2 <- c("MST1R",
"ST6GAL1",
"SYT17",
"CD247",
"CD96",
"IL15",
"MAGEC2",
"IL1A",
"RRAD",
"EOMES",
"NFKB1",
"MR1",
"MARCO",
"TLR4",
"CEACAM1",
"THY1",
"THY1",
"TGFB1",
"MAP2K1",
"IL1R1",
"CNOT4",
"DPP4",
"PBK",
"IL4R",
"PDGFC",
"VEGFC",
"PVR",
"SERPINB2",
"THY1")
# coefficient for each IRGP
coeff <- c(-0.278125761,
-0.240534714,
-0.231481299,
-0.219619661,
-0.14952529,
-0.134399494,
-0.123209559,
-0.109416714,
-0.107499057,
-0.103013301,
-0.088255513,
-0.078881388,
-0.040480343,
-0.036568213,
-0.026672769,
0.007069121,
0.030336853,
0.066360407,
0.132744554,
0.136897427,
0.159178132,
0.18447765,
0.211337792,
0.233469355,
0.261049599,
0.327501543,
0.33704137,
0.397375749,
0.46981137)
# initial check
if(max(expr) >= 25){
message("--please make sure a properly normalized expression data has been provided (e.g., FPKM or TPM); count data is not suitable because it does not consider gene length.")
}
if(!all(is.element(unique(c(IRGP1,IRGP2)), rownames(expr)))) {
missgene <- setdiff(unique(c(IRGP1,IRGP2)), rownames(expr))
stop(paste0(length(missgene)," genes cannot be mapped in your data, please check for the following missing feature(s):\n",
paste(missgene, collapse = "\n")))
}
# extract expression
IRGP1.expr <- expr[IRGP1,]
IRGP2.expr <- expr[IRGP2,]
# calculate difference and convert to binary matrix
IRGP.diff <- IRGP1.expr - IRGP2.expr
IRGP.binary <- ifelse(IRGP.diff < 0, 1, 0)
# estimate IRGPI
IRGPI <- apply(t(IRGP.binary),1,function(x) {x %*% coeff})
# output
outTab <- data.frame(SampleID = names(IRGPI),
IRGPI = as.numeric(IRGPI),
stringsAsFactors = F)
write.table(outTab,
file = file.path(res.path,"Estimated IRGPI.txt"),
sep = "\t",
row.names = FALSE,
col.names = TRUE,
quote = FALSE)
return(outTab)
}
tmp <- calIRGPI(expr = demo)
tmp
head(tmp)
head(blca.all.sinfo[tmp$SampleID,"IRGIP"])
blca.all.sinfo[tmp$SampleID,"IRGIP"] == tmp$IRGPI
blca.all.sinfo[tmp$SampleID,"IRGIP"]
tmp$IRGPI
demo <- tcga.blca.expr[c(IRGP1,IRGP2),1:10]
save(demo,file = "D:/Project/BLCA/Rpackage/BCaller/inst/extdata/demo.RData")
tmp <- calIRGPI(expr = demo)
tmp
library(devtools)
library(roxygen2)
library(usethis)
workdir <- "D:/Project/BLCA/Rpackage"; setwd(workdir)
usethis::create_package("BCaller")
workdir <- "D:/Project/BLCA/Rpackage/BCaller"; setwd(workdir)
usethis::use_testthat()
devtools::test()
usethis::use_testthat()
usethis::use_vignette("BCaller-vignette")
---
title: "BCaller-vignette"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{BCaller-vignette}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
usethis::use_readme_md()
usethis::use_vignette("BCaller-vignette")
usethis::use_testthat()
devtools::test()
usethis::use_readme_md()
usethis::use_news_md()
usethis::use_build_ignore()
usethis::use_mit_license(name = "Xiaofan Lu")
use_gpl3_license(name = "Xiaofan Lu")
system('R CMD Rd2pdf D:/Project/BLCA/Rpackage/BCaller')
devtools::document(pkg="D:/Project/BLCA/Rpackage/BCaller")
workdir <- "D:/Project/BLCA/Rpackage"; setwd(workdir)
devtools::document(pkg="D:/Project/BLCA/Rpackage/BCaller")
workdir <- "D:/Project/BLCA/Rpackage/BCaller"; setwd(workdir)
usethis::use_testthat()
usethis::use_vignette("BCaller-vignette")
usethis::use_readme_md()
usethis::use_news_md()
devtools::load_all()
system('R CMD Rd2pdf D:/Project/BLCA/Rpackage/BCaller')
devtools::install_github("xlucpu/BCaller")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("xlucpu/BCaller")
